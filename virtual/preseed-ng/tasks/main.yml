- name: make sure block device exists
  file:
    path: "{{ virtual.disk_blk | default(virtual_default_disk_blk) }}"
  check_mode: no
  when: not virtual_use_qcow2 | default(False) 

- name: "check if lock_file is present"
  stat:
    path: "{{ virtual_dir }}/preseed/{{ virtual.name }}.lock"
  check_mode: no
  register: virtual_preseed_lock

- name: "check if configuration file is present"
  stat:
    path: "{{ virtual_dir }}/conf/{{ virtual.name }}.xml"
  check_mode: no
  register: virtual_existing_conf

- name: "check if libvirt knows this vm"
  virt:
    name: "{{ virtual.name }}"
    command: status
  ignore_errors: yes
  register: virtual_existing_vm

- debug:
    msg: "[LOCK FAIL] virtual_preseed_lock={{ virtual_preseed_lock }}"
  when: "virtual_preseed_lock.stat.exists"

- debug:
    msg: "[CONF ALREADY EXISTS] virtual_existing_conf={{ virtual_existing_conf }}"
  when: "virtual_existing_conf.stat.exists == True"

- debug:
    msg: "[VM ALREADY EXISTS] virtual_existing_vm={{ virtual_existing_vm }}"
  when: "'status' in virtual_existing_vm"

- name: "run only when we got exclusive lock and no conf file is present"
  meta: end_host
  when: virtual_preseed_lock.stat.exists or virtual_existing_conf.stat.exists == True or 'status' in virtual_existing_vm 

- name: make sure vm has a lock file
  file:
    path: "{{ virtual_dir }}/preseed/{{ virtual.name }}.lock"
    state: touch
    mode: 0644
  when: not virtual_preseed_lock.stat.exists 

- name: prepare preseed dir for this host
  file:
    path: "{{ virtual_dir }}/preseed/{{ virtual.name }}/"
    state: directory

- name: prepare config files
  template:
    src: "{{ item }}"
    dest: "{{ virtual_dir }}/preseed/{{ virtual.name }}/{{ item }}"
  with_items:
    - cloud_init.cfg
    - network.cfg

- name: generate cloud confgiuration 
  shell: cloud-localds --network-config=network.cfg seed.qcow2 cloud_init.cfg
  args:
    chdir: "{{ virtual_dir }}/preseed/{{ virtual.name }}"

- name: prepare base disk (block)
  shell: qemu-img dd if={{ virtual_image }} of={{ virtual.disk_blk | default(virtual_default_disk_blk) }} bs=1M
  when: not virtual_use_qcow2 | default(False)

- name: prepare base disk (qcow2)
  shell: cp "{{ virtual_image }}" "{{ virtual.disk_blk | default(virtual_default_disk_blk) }}" && qemu-img resize "{{ virtual.disk_blk | default(virtual_default_disk_blk) }}" {{ virtual.disk_size }}G
  when: virtual_use_qcow2 | default(False)

- name: create vm using virt-install
  shell: |
    virt-install \
    --name="{{ virtual.name }}" \
    --arch=x86_64 \
    --vcpus="{{ virtual.cpus }}" \
    --ram="{{ virtual.ram }}" \
    --os-type=linux \
    --os-variant="{{ virtual_version }}" \
    --machine="{{ virtual.machine | default('ubuntu') }}" \
    --virt-type kvm \
    --hvm \
    --connect=qemu:///system \
    --network=bridge:"{{ networking[virtual.default_interface | default('eth0')].virtual_host_iface }}",model=virtio,mac={{ networking[virtual.default_interface | default('eth0')].ether }} \
    --boot hd \
    {% if virtual_use_qcow2|default(false) %}
    --disk path="{{ virtual.disk_blk | default(virtual_default_disk_blk) }}",device=disk,driver_type=qcow2,format=qcow2,bus=virtio \
    {% else %}
    --disk path="{{ virtual.disk_blk | default(virtual_default_disk_blk) }}",device=disk,bus=virtio,cache=none \
    {% endif %}
    --disk path="{{ virtual_dir }}/preseed/{{ virtual.name }}/seed.qcow2",device=cdrom \
    --graphics=vnc,port=-1 \
    --video virtio \
    --noautoconsole \
    --debug \
    --noreboot

- name: wait for vm to finish preseeding
  virt:
    command: info
  register: virtual_install
  until: virtual_install[virtual.name].state == "shutdown"
  retries: 20
  delay: 60

- debug: msg="ansible_distribution_release={{ ansible_distribution_release }}", verbosity=1

#TODO: check for presence of zabbix-agent2 package
- name: use zabbix-agent on older systems
  set_fact:
    zabbix_agent_version: 1
    zabbix_agent_name: "zabbix_agentd"
    zabbix_agent_service: "zabbix-agent"
  tags: configure
  when: "ansible_distribution_release == 'xenial' or ansible_distribution_release == 'trusty'"

- block:
    - name: remove older zabbix-agent
      package:
        name:
        - "zabbix-agent"
        state: absent
    - file:
        path: "/etc/zabbix/zabbix_agentd.conf"
        state: absent
    - file:
        path: "/etc/zabbix/zabbix_agentd.conf.dpkg-dist"
        state: absent
    - file:
        path: "/etc/zabbix/zabbix_agentd.d"
        state: absent
    - file:
        path: "/etc/zabbix/zabbix_agentd.psk"
        state: absent
  when: "not ( ansible_distribution_release == 'xenial' or ansible_distribution_release == 'trusty' )"

- name: install SW dependencies and tools
  package:
    name:
    - logtail
    - logrotate
    - sudo
    - jq
    - zabbix-sender
    - zabbix-get
    - snmp
    state: latest

- debug: msg="zabbix_agent_service={{ zabbix_agent_service }}", verbosity=1

- name: install zabbix-agent
  package:
    name:
    - "{{ zabbix_agent_service }}"
    state: latest
  notify: restart zabbix-agent

- block:
  - debug: msg="zabbix_etc_groups={{ zabbix_etc_groups }}", verbosity=1
 
  #XXX: this is not PC - dpkg might create group with different GID than ansible
  # check if group exists, and add only when it does - do not create group here
  # make user re-run zabbix role, when new sw is installed
  - name: ensure group exists
    group:
      name: "{{ item }}"
      state: present
    with_items: "{{ zabbix_etc_groups }}"

  - name: Add the user 'zabbix' to the groups
    user:
      name: zabbix
      groups: "{{ item }}"
      append: yes
    with_items: "{{ zabbix_etc_groups }}"

  when: zabbix_etc_groups 

- name: make sure zabbix_agent.d directory is present
  file:
    path: "/etc/zabbix/{{ zabbix_agent_name }}.d/"
    state: directory
    mode: 0755
  when: zabbix_agent_name is defined

- name: make sure zabbix home directory is present
  file:
    path: "/var/lib/zabbix/"
    state: directory
    mode: 0700
    owner: zabbix
    group: zabbix

- name: enumerate available zabbix templates
  include_vars:
    hash_behaviour: merge
    name: zabbix_template_definitions
    file: "{{ zabbix_templates_dir }}/{{ item }}.yaml"
  with_items: "{{ zabbix_templates }}"

- name: deploy zabbix sudoers.d
  copy:
    src: "{{ zabbix_templates_dir }}/{{ zabbix_template_definitions[item].sudoers }}"
    dest: "/etc/sudoers.d/zabbix-{{ item }}"
    owner: "root"
    mode: 0640
  with_items: "{{ zabbix_templates }}"
  when: zabbix_template_definitions[item].sudoers | default(false)

- name: deploy zabbix cron.d
  copy:
    src: "{{ zabbix_templates_dir }}/{{ zabbix_template_definitions[item].crond }}"
    dest: "/etc/cron.d/zabbix-{{ item }}"
    owner: "root"
    mode: 0640
  with_items: "{{ zabbix_templates }}"
  when: zabbix_template_definitions[item].crond | default(false)

- name: deploy zabbix user parameters
  template:
    src: "{{ zabbix_templates_dir }}/{{ zabbix_template_definitions[item].params }}"
    dest: "/etc/zabbix/{{ zabbix_agent_name }}.d/{{ item }}.conf"
    owner: "zabbix"
    group: "zabbix"
    mode: 0640
  with_items: "{{ zabbix_templates }}"
  when: zabbix_template_definitions[item].params | default(false)
  notify: restart zabbix-agent

- name: deploy zabbix scripts
  copy:
    src: "{{ zabbix_templates_dir }}/{{ item }}"
    dest: "/usr/local/bin/{{ item | basename }}"
    owner: "root"
    mode: 0755
  with_items: "{{ zabbix_template_definitions | json_query('* | [?scripts] .scripts') | flatten }}"

- name: deploy zabbix script projects (python)
  include_tasks: python_project.yml
  with_items: "{{ zabbix_template_definitions | json_query('* | [?python_projects] .python_projects') | flatten }}"

- name: configure zabbix-agent
  template:
    src: "zabbix_agent.conf"
    dest: "/etc/zabbix/{{ zabbix_agent_name }}.conf"
    owner: "zabbix"
    group: "zabbix"
    mode: u=rw,g=r,o=
  tags: configure
  notify: restart zabbix-agent

- name: save zabbix_agentd.psk
  template:
    src: "zabbix_agent.psk"
    dest: "/etc/zabbix/{{ zabbix_agent_name }}.psk"
    owner: "zabbix"
    group: "zabbix"
    mode: 0600
  when: zabbix_agent_psk is defined
  tags: configure
  notify: restart zabbix-agent

- name: rotate zabbix logs
  copy:
    src: logrotate
    dest: /etc/logrotate.d/{{ zabbix_agent_service }}
  tags: configure

- name: enable zabbix-agent service
  service:
    name: "{{ zabbix_agent_service }}"
    enabled: yes
  tags: configure
  notify: restart zabbix-agent
  when: zabbix_agent_service is defined

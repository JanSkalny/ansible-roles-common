Client {
  Name = {{backup_client}}
  Address = {{backup_address}}
  FDPort = {{backup_port|default(9102)}}
  Catalog = MyCatalog
  Password = "{{hostvars[backup_client]['backup_password']}}"
  AutoPrune = yes

  TLS Enable = yes
  TLS Require = yes
  TLS CA Certificate File = /etc/bacula/ssl/ca.crt
  TLS Certificate = /etc/bacula/ssl/{{backup_director}}.crt
  TLS Key = /etc/bacula/ssl/{{backup_director}}.pem
}

Job {
  Name = {{backup_client}}
  Client = {{backup_client}}
  FileSet = {{backup_client}}

  Full Backup Pool = full-backups
  Incremental Backup Pool = inc-backups
  Differential Backup Pool = diff-backups

{% if hostvars[backup_client]['backup_sql_password'] is defined %}
  ClientRunBeforeJob = "/etc/bacula/scripts/make_mysql_backup.sh %l"
{% endif %}
{% if hostvars[backup_client]['backup_gitlab_dir'] is defined %}
  ClientRunBeforeJob = "/etc/bacula/scripts/make_gitlab_backup.sh %l"
{% endif %}
{% if hostvars[backup_client]['backup_elastic_repository'] is defined %}
  ClientRunBeforeJob = "/etc/bacula/scripts/make_elastic_backup.sh %l"
{% endif %}
{% if hostvars[backup_client]['backup_pgsql_dump'] is defined and hostvars[backup_client]['backup_pgsql_dump'] %}
  ClientRunBeforeJob = "/etc/bacula/scripts/make_pgsql_backup.sh %l"
{% endif %}

  JobDefs = "DefaultJob"
}

FileSet {
  Name = "{{backup_client}}"
  Include {
    Options {
      signature = MD5
      compression = gzip
    }
    File = /etc
    File = /home
    File = /root
    File = /var/backups
    File = /var/www
{% for backup_dir in backup_include %}
    File = {{backup_dir}}
{% endfor %}
  }

  Exclude {
    File = /proc
    File = /tmp
    File = /.journal
    File = /.fsck
	File = /var/run
	File = /run
	File = /sys
{% for backup_dir in backup_exclude %}
    File = {{backup_dir}}
{% endfor %}
  }
}


# {{ ansible_managed }}

# The loopback network interface
auto lo
iface lo inet loopback
	pre-up nameif
{% for r in source_routing | default([]) %}
	up ip route flush table "{{ r.routing_table }}" || true
	up ip route add default via "{{ r.via }}" table "{{ r.routing_table }}"
{% for s in r.sources %}
	up ip rule add from "{{ s }}" lookup "{{ r.routing_table }}"
{% endfor %}
{% endfor %}

{%- macro configure_interface(iface, iface_name) -%}
{% if 'dns' in iface %}
	dns-nameservers {{ iface.dns }}
{% endif %}
{% if 'dns-search' in iface %}
	dns-search {{ iface['dns-search'] }}
{% endif %}
{% if 'bond_master' in iface %}
	bond-master {{ iface.bond_master }}
	#bond-primary {{ iface_name }}
{% endif %}
{% if 'bond_slaves' in iface %}
	bond-slaves none
	bond-mode 802.3ad
	bond-xmit-hash-policy {{ iface.bond_hash_policy | default('layer2+3') }}
	bond-miimon 100
	bond-lacp-rate 1
{% endif %}
{% if 'bridge_ports' in iface %}
	bridge_ports {{ iface.bridge_ports | join(' ') }}
	bridge_stp off
	bridge_fd 0
	bridge_maxwait 0
{% endif %}
{% if 'vlan-id' in iface and 'vlan-iface' in iface %}
{% if iface_name is not match(":") %}
	pre-up ip link add link {{ iface['vlan-iface'] }} name $IFACE type vlan id {{ iface['vlan-id'] }}
	post-down ip link del link dev $IFACE
{% endif %}
{% endif %}
{% if 'mtu' in iface %}
	mtu {{ iface.mtu }}
{% endif %}
{% if 'routes' in iface %}
{% for route in iface.routes %}
{% if route.net is defined %}
	up route add -net {{ route.net }} gw {{ route.via }} dev {{ iface_name }}
{% elif route.host is defined %}
	up route add -host {{ route.host }} gw {{ route.via }} dev {{ iface_name }}
{% endif %}
{% endfor %}
{% endif %}
{% if 'preup' in iface %}
	pre-up {{ iface.preup }}
{% endif %}
{% if 'up' in iface %}
	up {{ iface.up }}
{% endif %}
{% if 'down' in iface %}
	down {{ iface.down }}
{% endif %}
{%- endmacro -%}


{% set ordered_networking = networking.copy() %}
{% for iface_name,item in networking.items() %}
{% if iface_name.startswith('bond') and 'order' not in item %}
{% set x=ordered_networking[iface_name].update({'order': 10})  %}
{% elif iface_name.startswith('vlan') and 'order' not in item %}
{% set x=ordered_networking[iface_name].update({'order': 20})  %}
{% elif iface_name.startswith('brVlan') and 'order' not in item %}
{% set x=ordered_networking[iface_name].update({'order': 30})  %}
{% elif 'order' not in item %}
{% set x=ordered_networking[iface_name].update({'order': 100})  %}
{% endif %}
{% endfor %}


{% for iterator in ordered_networking.items() | sort(attribute='1.order') %}
{% set iface_name = iterator[0] %}
{% set item = iterator[1] %}

# {{ item }}
{% if iface_name is not match(":") %}
auto {{ iface_name }}
{% endif %}
{% if 'address' in item and item.address != 'dhcp' %}
iface {{ iface_name }} inet static
	address {{ item.address | ansible.utils.ipaddr('address') }}
	netmask {{ item.address | ansible.utils.ipaddr('netmask') }}
{% if item.gateway | default(False) %}
	gateway {{ item.gateway }}
{% endif %}
{{ configure_interface(item, iface_name) }}
{% endif %}
{% if 'address6' in item and item.address6 != 'auto' %}
iface {{ iface_name }} inet6 static
	address {{ item.address6 | ansible.utils.ipaddr('address') }}
	netmask {{ item.address6 | ansible.utils.ipaddr('prefix') }}
{% if 'gateway6' in item %}
	gateway {{ item.gateway6 }}
{% endif %}
	autoconf 0
	accept_ra 0
{{ configure_interface(item, iface_name) }}
{% endif %}
{% if 'address' in item and item.address == 'dhcp' %}
iface {{ iface_name }} inet dhcp
{{ configure_interface(item, iface_name) }}
{% endif %}
{% if 'address' not in item and 'address6' not in item %}
iface {{ iface_name }} inet manual
{{ configure_interface(item, iface_name) }}
{% endif %}
{% endfor %}

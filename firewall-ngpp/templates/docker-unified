#! /bin/sh
#
# {{ ansible_managed }}
# Template: docker-unified
#

{%- macro lookup_object(name) -%}
{% if name in firewall_objects %}
{# make sure object is array of names or addresses #}
{% set obj = firewall_objects[name] %}
{% set entries = obj if obj is iterable and obj is not string else[obj] %}
{% set results = [] %}
{% for name_or_addr in entries %}
{% set trimmed = name_or_addr.strip() %}
{% if trimmed in firewall_objects %}
{{ lookup_object(trimmed) }}
{% else %}
{% if trimmed | ansible.utils.ipaddr or trimmed.startswith('!') %}
{{ trimmed }}
{% else %}
{{ xxx_invalid|mandatory("Nested object not found and direct DNS referencing not allowed: "+trimmed) }}
{% endif %}
{% endif %}
{% endfor %}
{% else %}
{{ xxx_invalid|mandatory("Referenced invalid object and direct DNS referencing not allowed: "+name) }}
{% endif %}
{%- endmacro -%}

{%- macro normalize_addrs(rule, attr) -%}
{% if attr in rule %}
{% set attrs = ( rule[attr].replace(' ','').split(',') if rule[attr] is string else rule[attr] ) %}
{% for name_or_addr in attrs %}
{% set trimmed = name_or_addr.strip() %}
{% if trimmed in firewall_objects %}
{{ lookup_object(trimmed) }}
{% else %}
{% if trimmed | ansible.utils.ipaddr or trimmed.startswith('!') %}
{{ trimmed }}
{% else %}
{{ xxx_invalid|mandatory("Object not found and direct DNS referencing not allowed: "+name_or_addr+" rule="+(rule|to_json)) }}
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{%- endmacro -%}

{%- macro normalize_ports(rule, proto) -%}
{%- set ports = rule.proto[proto] if rule.get('proto', {}).get(proto) is not none else [] %}
{%- if ports is string %}
  {%- set ports = ports.replace(' ', '').split(',') %}
{%- elif ports is number %}
  {%- set ports = [ports] %}
{%- endif %}
{{ ports | sort | unique | join(',') }}
{%- endmacro -%}

{%- macro format_addr(match,addr) -%}
  {%- set trimmed = addr.strip() %}
  {%- if trimmed == "ANY" %}
  {%- elif trimmed.startswith('!') %}
    {%- set addrs = trimmed[1:].split() %}
    {%- for addr in addrs %}
 ! {{ match }} {{ addr }} 
    {%- endfor %}
  {%- else %}
 {{ match }} {{ trimmed }}
  {%- endif %}
{%- endmacro -%}

{%- macro format_proto(proto,param) -%}
{% set proto = proto.strip() %}
{% set param = param.strip() %}
{%- if proto != "ANY" %}
 -p {{ proto }}
{%- if param != "ANY" %}
{%- if proto in ['tcp','udp','sctp'] %}
 --dport {{ param }}
{%- elif proto == 'icmp' %}
 --icmp-type {{ param }}
{%- elif proto == 'icmp6' %}
 --icmpv6-type {{ param }}
{%- endif -%}
{%- endif -%}
{%- endif -%}
{%- endmacro -%}


{%- macro generate_rule(rule, chain, default_action='LOG_ACCEPT', ip_ver=4) -%}
# {{ rule | to_json }}
{% set src_raw = normalize_addrs(rule, 'src').split('\n') | difference(['']) | sort %}
{% set dst_raw = normalize_addrs(rule, 'dst').split('\n') | difference(['']) | sort %}
# src addrs: {{ src_raw }}
# dst addrs: {{ dst_raw }}
{% set src_addrs = src_raw if src_raw else ['ANY'] %}
{% set dst_addrs = dst_raw if dst_raw else ['ANY'] %}
{% set src_list = " -m set --match-set "+rule.src_list+" src " if rule.src_list|default(False) else "" %}
{% for src_addr in (src_addrs | sort ) -%}
{%- for dst_addr in (dst_addrs | sort ) -%}
{% set src = format_addr("-s", src_addr) %}
{% set dst = format_addr("-d", dst_addr) %}
{% if ((ip_ver == 4 and ('.' in src or '.' in dst)) or (ip_ver == 6 and (':' in src or ':' in dst)) or (src == "ANY" and dst == "ANY")) %}
{% for rule_proto, rule_ports in (rule.proto if rule.proto is defined else {"ANY": "ANY"}).items() %}
{% set raw_ports = normalize_ports(rule, rule_proto).split(',') | default([]) | difference(['']) | sort %}
{% set rule_ports = raw_ports if raw_ports else ['ANY'] %}
{% for port in rule_ports %}
{% set proto = format_proto(rule_proto, port) %}
$IT{{ ip_ver }} -A {{ chain }}{{ proto }}{{ src_list }}{{ src }}{{ dst }} -j {{ rule.rule | default(default_action) }}
{% endfor %}
{% endfor %}
{% endif %}
{% endfor %}
{% endfor %}
{%- endmacro -%}

{%- macro normalize_docker_rule(rule) -%}
{% set docker_rule_map = {"LOG_ACCEPT": "LOG_DOCKER_ACCEPT", "LOG_WILL_DROP": "LOG_DOCKER_WILL_DROP", "ACCEPT": "RETURN" }
{% if rule in docker_rule_map %}
{{ docker_rule_map[rule]}}
{% else %}
{{ xxx_invalid|mandatory("Rule action not handleled by docker! "+rule) }}
{%- endmacro -%}

#
# Simple iptables management script (fw.sh for docker)

### BEGIN INIT INFO
# Provides:          fw.sh
# Required-Start:    $local_fs $network
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: fw.sh
# Description:       firewall
### END INIT INFO

IT4="{{ firewall_iptables }}"
IT6="{{ firewall6_iptables }}"

# flush nftables for fun and profit
#XXX: not for docker hosts!!
#nft flush ruleset

# load additional modules
for M in ip_conntrack ip_conntrack_ftp ip_conntrack_sip; do
  modprobe $M 2>/dev/null
done

# (docker: forwarding should be enabled always... just don't touch it)
#echo {{ firewall_ip_forward | default(0) | int }} > /proc/sys/net/ipv4/ip_forward
echo {{ firewall6_ip_forward | default(0) | int }} > /proc/sys/net/ipv6/conf/all/forwarding
echo 1 > /proc/sys/net/ipv4/tcp_syncookies
echo {{ firewall_rp_filter | default(1) | int }} > /proc/sys/net/ipv4/conf/all/rp_filter
echo 0 > /proc/sys/net/ipv4/conf/all/log_martians
echo {{ firewall_log_martians | default(1) | int }} > /proc/sys/net/ipv4/conf/default/log_martians
echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts
echo 1 > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses
echo 0 > /proc/sys/net/ipv4/conf/all/send_redirects
echo 0 > /proc/sys/net/ipv4/conf/all/accept_source_route
echo 0 > /proc/sys/net/ipv6/conf/all/accept_source_route

{% for iface in firewall_no_martians_ifaces | default([]) %}
echo 0 > /proc/sys/net/ipv4/conf/{{ iface }}/log_martians
{% endfor %}

for PROTO in 4 6; do
  IT=$( eval echo \$IT$PROTO )
  X=$( [ $PROTO -eq 6 ] && echo "6" )

  # don't flush anything globally. just try to clean up from previous fw.sh
  $IT -D FORWARD -j CHECK_IF
  $IT -D FORWARD -m conntrack --ctstate INVALID -j LOG_DROP_INVALID
  for CHAIN in INPUT OUTPUT DOCKER-USER; do
    $IT -F $CHAIN 2>/dev/null
  done

  # delete and flush any custom-made chains 
  for CHAIN in CHECK_IF LOG_ACCEPT LOG_DROP LOG_REJECT LOG_DOCKER_ACCEPT LOG_DOCKER_WILL_DROP LOG_WILL_DROP; do
    $IT -F $CHAIN
    $IT -X $CHAIN
  done
  for CHAIN in $( $IT -n -L | grep '^Chain \(LOG_DROP_\|LOG_WILL_DROP_\)' | awk '{print $2}' ); do
    $IT -F $CHAIN
    $IT -X $CHAIN
  done

  # default rulesets
  $IT -P INPUT DROP
  $IT -P OUTPUT DROP
  $IT -P FORWARD DROP

  # custom REJECT action with logging
  $IT -N LOG_REJECT
    $IT -A LOG_REJECT -m limit --limit 10/sec --limit-burst 20 -j LOG \
      --log-ip-options --log-tcp-options --log-uid \
      --log-prefix "FW${PROTO}-REJECT " --log-level info
    $IT -A LOG_REJECT -m limit --limit 10/sec --limit-burst 20 -j REJECT \
      --reject-with icmp$X-port-unreachable
    $IT -A LOG_REJECT -j DROP

  # custom DROP action with logging
  $IT -N LOG_DROP
    $IT -A LOG_DROP -m limit --limit 10/sec --limit-burst 20 -j LOG \
      --log-ip-options --log-tcp-options --log-uid \
      --log-prefix "FW${PROTO}-DROP " --log-level info
    $IT -A LOG_DROP -j DROP

  # custom ACCEPT action with logging
  $IT -N LOG_ACCEPT
    $IT -A LOG_ACCEPT -m limit --limit 50/sec --limit-burst 100 -j LOG \
      --log-ip-options --log-tcp-options --log-uid \
      --log-prefix "FW${PROTO}-ACCEPT " --log-level info
    $IT -A LOG_ACCEPT -j ACCEPT

  # custom ACCEPT action with logging
  $IT -N LOG_WILL_DROP
    $IT -A LOG_WILL_DROP -m limit --limit 50/sec --limit-burst 100 -j LOG \
      --log-ip-options --log-tcp-options --log-uid \
      --log-prefix "FW${PROTO}-WILL-DROP " --log-level info
    $IT -A LOG_WILL_DROP -j ACCEPT

  # custom ACCEPT actions with special log messages
{% for rule in firewall_accept_rules|default([]) %}
  $IT -N LOG_ACCEPT_{{ rule | upper }}
    $IT -A LOG_ACCEPT_{{ rule | upper }} -m limit --limit 50/sec --limit-burst 100 -j LOG \
      --log-ip-options --log-tcp-options --log-uid \
      --log-prefix "FW${PROTO}-ACCEPT-{{ rule | upper }} " --log-level info
    $IT -A LOG_ACCEPT_{{ rule | upper }} -j ACCEPT
{% endfor %}

  # custom WILL-DROP actions with special log messages
{% for rule in firewall_will_drop_rules|default([]) %}
  $IT -N LOG_WILL_DROP_{{ rule | upper }}
    $IT -A LOG_WILL_DROP_{{ rule | upper }} -m limit --limit 50/sec --limit-burst 100 -j LOG \
      --log-ip-options --log-tcp-options --log-uid \
      --log-prefix "FW${PROTO}-WILL-DROP-{{ rule | upper }} " --log-level info
    $IT -A LOG_WILL_DROP_{{ rule | upper }} -j ACCEPT
{% endfor %}

  # custom DROP actions with special log messages
{% for rule in firewall_drop_rules|default([]) %}
  $IT -N LOG_DROP_{{ rule | upper }}
    $IT -A LOG_DROP_{{ rule | upper }} -m limit --limit 10/sec --limit-burst 20 -j LOG \
      --log-ip-options --log-tcp-options --log-uid \
      --log-prefix "FW${PROTO}-DROP-{{ rule | upper }} " --log-level info
    $IT -A LOG_DROP_{{ rule | upper }} -j DROP
{% endfor %}

  # custom "RETURN" action with logging
  $IT -N LOG_DOCKER_ACCEPT
    $IT -A LOG_DOCKER_ACCEPT -m limit --limit 50/sec --limit-burst 100 -j LOG \
      --log-ip-options --log-tcp-options --log-uid \
      --log-prefix "FW${PROTO}-ACCEPT " --log-level info
    #$IT -A LOG_DOCKER_ACCEPT -j "RETURN 2" :F
  $IT -N LOG_DOCKER_WILL_DROP
    $IT -A LOG_DOCKER_WILL_DROP -m limit --limit 50/sec --limit-burst 100 -j LOG \
      --log-ip-options --log-tcp-options --log-uid \
      --log-prefix "FW${PROTO}-WILL-DROP " --log-level info

done
IT=""


############################################################
### verify source address of packet (RFC 2827, RFC 1918)

$IT4 -N CHECK_IF
  # allow dhcp on specific interfaces
{% for firewall_iface_name, firewall_iface in firewall_interfaces.items() %}
{% if firewall_iface.allow_dhcp | default(False) %}
  $IT4 -A CHECK_IF -i {{ firewall_iface_name }} -s 0.0.0.0 -j RETURN # DHCP
{% endif %}
{% endfor %}

{% if not (firewall_iface.allow_igmp | default(True)) %}
  # IGMP
  $IT4 -A CHECK_IF -s 0.0.0.0/8 -d 224.0.0.1 -p 2 -j LOG_DROP_CHECKIF_IGMP
{% endif %}

  # don't accept APIPA addresses
  $IT4 -A CHECK_IF -s 169.254.0.0/16 -j DROP

  # no-one can send from special address ranges!
  $IT4 -A CHECK_IF -s 127.0.0.0/8 -j LOG_DROP_CHECKIF_SPOOF      # loopback
  $IT4 -A CHECK_IF -s 0.0.0.0/8 -j LOG_DROP_CHECKIF_DHCP         # DHCP
  $IT4 -A CHECK_IF -s 192.0.2.0/24 -j LOG_DROP_CHECKIF_SPOOF     # RFC 3330
  $IT4 -A CHECK_IF -s 204.152.64.0/23 -j LOG_DROP_CHECKIF_SPOOF  # RFC 3330
  $IT4 -A CHECK_IF -s 224.0.0.0/3 -j LOG_DROP_CHECKIF_SPOOF      # multicast

  # docker containers and bridges can spoof (rely on rp-filter)
  $IT4 -A CHECK_IF -i veth+ -j RETURN
  $IT4 -A CHECK_IF -i br-+ -j RETURN
  $IT4 -A CHECK_IF -i docker0 -j RETURN

  #TODO: drop docker ranges from other interfaces!!!
  $IT4 -A CHECK_IF -s 172.17.0.0/16 -j {{ firewall_rule_docker_checkif }}

  #XXX: no per-interface rule evaluation yet
  $IT4 -A CHECK_IF -j RETURN

$IT6 -N CHECK_IF
  # disable IPv6 source routing (and ping-pong)
  $IT6 -A CHECK_IF -m rt --rt-type 0 -j LOG_DROP_HACK

  # allow link-local addresses only with hl 255
  $IT6 -A CHECK_IF -s fe80::/10 -m hl --hl-eq 255 -j RETURN
  #TODO: replace following rule with DROP_HACK
  $IT6 -A CHECK_IF -s fe80::/10 -j RETURN
  #$IT6 -A CHECK_IF -s fe80::/10 -j LOG_DROP_HACK

  # docker containers and bridges can spoof (rely on rp-filter)
  $IT6 -A CHECK_IF -i veth+ -j RETURN
  $IT6 -A CHECK_IF -i br-+ -j RETURN
  $IT6 -A CHECK_IF -i docker0 -j RETURN

  #XXX: no check_if interface rules yet
  $IT6 -A CHECK_IF -j RETURN

############################################################
### allow loopbacks, check origin, and related/established

{% for iface in firewall_whitelisted_ifaces | default(['lo']) %}
  # everything is allowed on {{ iface }}
  $IT4 -A INPUT -i {{ iface }} -j ACCEPT
  $IT6 -A INPUT -i {{ iface }} -j ACCEPT
  $IT4 -A OUTPUT -o {{ iface }} -j ACCEPT
  $IT6 -A OUTPUT -o {{ iface }} -j ACCEPT
{% endfor %}

# check for spoofed addresses
for CHAIN in INPUT; do
  $IT4 -A $CHAIN -j CHECK_IF
  $IT6 -A $CHAIN -j CHECK_IF
done

# connection tracking:
# - allow all related/established traffic
# - invalid packets MUST be dropped!
for CHAIN in INPUT OUTPUT; do
  $IT4 -A $CHAIN -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
  $IT4 -A $CHAIN -m conntrack --ctstate INVALID -j {{ firewall_default_rule_invalid }}
  $IT6 -A $CHAIN -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
  $IT6 -A $CHAIN -m conntrack --ctstate INVALID -j {{ firewall_default_rule_invalid }}
done

# add CHECK_IF and drop INVALID to docker FORWARD chain  (don't forget to cleanup)
$IT4 -I FORWARD -m conntrack --ctstate INVALID -j {{ firewall_default_rule_invalid }}
$IT6 -I FORWARD -m conntrack --ctstate INVALID -j {{ firewall_default_rule_invalid }}
$IT4 -I FORWARD -j CHECK_IF
$IT6 -I FORWARD -j CHECK_IF

# host can do everything to docker containers and bridges :(
$IT4 -A OUTPUT -o br+ -j ACCEPT
$IT4 -A OUTPUT -o veth+ -j ACCEPT
$IT6 -A OUTPUT -o br+ -j ACCEPT
$IT6 -A OUTPUT -o veth+ -j ACCEPT


############################################################
### INPUT ruleset

{% for input_rule in firewall_input|default([]) %}
{{ generate_rule(input_rule, 'INPUT', 'LOG_ACCEPT', 4) }}
{% endfor %}

# ignore broadcasts
{% if firewall_ignore_broadcasts %}
$IT4 -A INPUT -m addrtype --dst-type BROADCAST -j DROP
{% endif %}

# IPv4 ICMP rate limit
$IT4 -A INPUT -p icmp -m limit --limit {{ firewall_ping_rate | default(20) }}/second -j ACCEPT
$IT4 -A INPUT -p icmp -j LOG_DROP_RATELIMIT

# ignore junk from windows servers (samba)
#for PORT in 137 138; do
#  $IT4 -A INPUT -p udp --dport $PORT -j DROP
#done

# default rule is
$IT4 -A INPUT -j {{ firewall_default_rule_input }}


############################################################
### INPUT ruleset (IPv6)

{% for input_rule in firewall_input|default([]) %}
{{ generate_rule(input_rule, 'INPUT', 'LOG_ACCEPT', 6) }}
{% endfor %}

{% if firewall6_allow_all_icmp | default(False) %}
  $IT6 -A INPUT -p ipv6-icmp -j RETURN
{% else %}
  # IPv6 NDP only with hl 255 should be allowed (excpt RA on firewalls - they know how to route)
  $IT6 -A INPUT -p ipv6-icmp --icmpv6-type router-solicitation -m hl --hl-eq 255 -j LOG_ACCEPT
  {% if firewall6_allow_ra %}
  $IT6 -A INPUT -p ipv6-icmp --icmpv6-type router-advertisement -m hl --hl-eq 255 -j LOG_ACCEPT
  {% endif %}
  $IT6 -A INPUT -p ipv6-icmp --icmpv6-type neighbor-solicitation -m hl --hl-eq 255 -j LOG_ACCEPT
  $IT6 -A INPUT -p ipv6-icmp --icmpv6-type neighbor-advertisement -m hl --hl-eq 255 -j LOG_ACCEPT

  # NDP with bigger HL is consider malicious
  $IT6 -A INPUT -p ipv6-icmp --icmpv6-type router-solicitation -j LOG_DROP_HACK
  $IT6 -A INPUT -p ipv6-icmp --icmpv6-type router-advertisement -j LOG_DROP_HACK
  $IT6 -A INPUT -p ipv6-icmp --icmpv6-type neighbor-solicitation -j LOG_DROP_HACK
  $IT6 -A INPUT -p ipv6-icmp --icmpv6-type neighbor-advertisement -j LOG_DROP_HACK

  # IPv6 MLD
  $IT6 -A INPUT -p ipv6-icmp --icmpv6-type 130 -j LOG_ACCEPT
  $IT6 -A INPUT -p ipv6-icmp --icmpv6-type 131 -j LOG_ACCEPT
  $IT6 -A INPUT -p ipv6-icmp --icmpv6-type 132 -j LOG_ACCEPT
  $IT6 -A INPUT -p ipv6-icmp --icmpv6-type 143 -j LOG_ACCEPT

  # IPv6 ICMP PING (rate limited)
  $IT6 -A INPUT -p ipv6-icmp --icmpv6-type echo-request -m limit --limit {{ firewall_ping_rate | default(20) }}/second -j ACCEPT
  $IT6 -A INPUT -p ipv6-icmp --icmpv6-type echo-request -j LOG_DROP_RATELIMIT
{% endif %}

# default rule is
$IT6 -A INPUT -j {{ firewall_default_rule_input }}


############################################################
### OUTPUT ruleset

$IT4 -A OUTPUT -o lo -j ACCEPT
$IT6 -A OUTPUT -o lo -j ACCEPT

{% for output_rule in firewall_output|default([]) %}
{{ generate_rule(output_rule, 'OUTPUT', 'LOG_ACCEPT', 6) }}
{% endfor %}

# default to drop
$IT4 -A OUTPUT -j {{ firewall_default_rule_output }}


############################################################
### OUTPUT ruleset (IPv6)

{% for output_rule in firewall_output|default([]) %}
{{ generate_rule(output_rule, 'OUTPUT', 'LOG_ACCEPT', 6) }}
{% endfor %}

{% if firewall6_allow_all_icmp | default(False) %}
  $IT6 -A OUTPUT -p ipv6-icmp -j RETURN
{% else %}
  # IPv6 NDP only with hl 255 should be allowed
  $IT6 -A OUTPUT -p ipv6-icmp --icmpv6-type router-solicitation -m hl --hl-eq 255 -j LOG_ACCEPT
  $IT6 -A OUTPUT -p ipv6-icmp --icmpv6-type router-advertisement -m hl --hl-eq 255 -j LOG_ACCEPT
  $IT6 -A OUTPUT -p ipv6-icmp --icmpv6-type neighbor-solicitation -m hl --hl-eq 255 -j LOG_ACCEPT
  $IT6 -A OUTPUT -p ipv6-icmp --icmpv6-type neighbor-advertisement -m hl --hl-eq 255 -j LOG_ACCEPT

  # IPv6 MLD
  $IT6 -A OUTPUT -p ipv6-icmp --icmpv6-type 130 -j LOG_ACCEPT
  $IT6 -A OUTPUT -p ipv6-icmp --icmpv6-type 131 -j LOG_ACCEPT
  $IT6 -A OUTPUT -p ipv6-icmp --icmpv6-type 132 -j LOG_ACCEPT
  $IT6 -A OUTPUT -p ipv6-icmp --icmpv6-type 143 -j LOG_ACCEPT

  # IPv6 ICMP PING (rate limited)
  $IT6 -A OUTPUT -p ipv6-icmp --icmpv6-type echo-request -m limit --limit {{ firewall_ping_rate | default(20) }}/second -j ACCEPT
  $IT6 -A OUTPUT -p ipv6-icmp --icmpv6-type echo-request -j LOG_DROP_RATELIMIT
{% endif %}

# default to drop
$IT6 -A OUTPUT -j {{ firewall_default_rule_output }}


############################################################
### DOCKER "INPUT" ruleset

# make sure DOCKER-USER chain exists and is empty
$IT4 -N DOCKER-USER 2>/dev/null
$IT4 -F DOCKER-USER

# connection tracking:
# - allow all related/established traffic
# - invalid packets MUST be dropped!
$IT4 -A DOCKER-USER -m conntrack --ctstate ESTABLISHED,RELATED -j RETURN
$IT4 -A DOCKER-USER -m conntrack --ctstate INVALID -j LOG_DROP_INVALID

# everything between docker-containers is handled by docker
$IT4 -A DOCKER-USER -i veth+ -o veth+ -j LOG_DOCKER_ACCEPT
$IT4 -A DOCKER-USER -i veth+ -o veth+ -j RETURN
$IT4 -A DOCKER-USER -i veth+ -o br-+ -j LOG_DOCKER_ACCEPT
$IT4 -A DOCKER-USER -i veth+ -o br-+ -j RETURN
$IT4 -A DOCKER-USER -i br-+ -o veth+ -j LOG_DOCKER_ACCEPT
$IT4 -A DOCKER-USER -i br-+ -o veth+ -j RETURN
$IT4 -A DOCKER-USER -i br-+ -o br-+ -j LOG_DOCKER_ACCEPT
$IT4 -A DOCKER-USER -i br-+ -o br-+ -j RETURN

{% for input_rule in firewall_input %}
{% set src_raw = normalize_addrs(rule, 'src').split('\n') | difference(['']) | sort %}
{% set src_addrs = src_raw if src_raw else ['ANY'] %}
{% set firewall_tmp_target = normalize_docker_rule(input_rule.rule | default("LOG_ACCEPT")) %}
# src addrs: {{ src_raw }}
# dockerized target: {{ firewall_tmp_target }}
{% for src_addr in (src_addrs | sort ) -%}
  {% set src = format_addr("-s", src_addr) %}
  {% for rule_proto, rule_ports in (rule.proto if rule.proto is defined else {"ANY": "ANY"}).items() %}
    {% set raw_ports = normalize_ports(rule, rule_proto).split(',') | default([]) | difference(['']) | sort %}
    {% set rule_ports = raw_ports if raw_ports else ['ANY'] %}
    {% for port in rule_ports %}
      {% set proto = format_proto(rule_proto, port) %}
      $IT4 -A DOCKER-USER{{ proto }} -m conntrack --ctstate NEW --ctorigdstport {{ port }}{{ src }} -j {{ firewall_tmp_target }}
      {% if firewall_tmp_target == "LOG_DOCKER_ACCEPT" or firewall_tmp_target == "LOG_DOCKER_WILL_DROP" %}
      $IT4 -A DOCKER-USER{{ proto }} -m conntrack --ctstate NEW --ctorigdstport {{ port }}{{ src }} -j RETURN
      {% endif %}
    {% endfor %}
  {% endfor %}
{% endfor %}
{% endfor %}

# everything else from physical interfaces is rejected
#XXX: DROP ALL OTHER FROM GLOBAL IFACES!!!
# normalized default {{ normalize_docker_rule(firewall_default_rule_input) }}

# let docker handle the rest...
$IT4 -A DOCKER-USER -j RETURN



############################################################
### FORWARD ruleset
# docker: don't touch FORWARD

### NAT ruleset

#XXX: no natting in ngpp yet

############################################################
### custom firewall patches

{% if firewall_final_patch is defined %}
{% for rule in firewall_final_patch %}
{{ rule }}
{% endfor %}
{% endif %}


############################################################

### fail2ban integration
[ -f /etc/init.d/fail2ban ] && /etc/init.d/fail2ban restart

exit 0

############################
# ELASTICSEARCH:
############################
# instalation last version of elasticsearch in cluster manner with some hardening
# based on processes in SK-CERT
############################
# PREREQUISITE:
############################
# VM with installed OS must exist 
# with enough DISK (1TB prod, 100GB test) space for elastic data
# with enough RAM (35GB prod, 8GB test) for java VM 
############################
# INFO:
############################
# cluster join ... aby to fungovalo musi byt obojstranna viditelnost medzi nodami clustra a openssl musi prejst
# 
# [CERT] root@elastic79-1:straka # openssl s_client -connect 10.130.196.42:9300 -CAfile /etc/elasticsearch/certs/ca.crt -cert /etc/elasticsearch/certs/elastic79-?.dev.sk-cert.sk.crt -key /etc/elasticsearch/certs/elastic79-?.dev.sk-cert.sk.key
# [CERT] root@elastic79-1:straka # openssl s_client -connect 10.130.196.43:9300 -CAfile /etc/elasticsearch/certs/ca.crt -cert /etc/elasticsearch/certs/elastic79-?.dev.sk-cert.sk.crt -key /etc/elasticsearch/certs/elastic79-?.dev.sk-cert.sk.key

# [CERT] root@elastic79-2:straka # openssl s_client -connect 10.130.196.41:9300 -CAfile /etc/elasticsearch/certs/ca.crt -cert /etc/elasticsearch/certs/elastic79-?.dev.sk-cert.sk.crt -key /etc/elasticsearch/certs/elastic79-?.dev.sk-cert.sk.key
# [CERT] root@elastic79-2:straka # openssl s_client -connect 10.130.196.43:9300 -CAfile /etc/elasticsearch/certs/ca.crt -cert /etc/elasticsearch/certs/elastic79-?.dev.sk-cert.sk.crt -key /etc/elasticsearch/certs/elastic79-?.dev.sk-cert.sk.key

# [CERT] root@elastic79-3:straka # openssl s_client -connect 10.130.196.42:9300 -CAfile /etc/elasticsearch/certs/ca.crt -cert /etc/elasticsearch/certs/elastic79-?.dev.sk-cert.sk.crt -key /etc/elasticsearch/certs/elastic79-?.dev.sk-cert.sk.key
# [CERT] root@elastic79-3:straka # openssl s_client -connect 10.130.196.43:9300 -CAfile /etc/elasticsearch/certs/ca.crt -cert /etc/elasticsearch/certs/elastic79-?.dev.sk-cert.sk.crt -key /etc/elasticsearch/certs/elastic79-?.dev.sk-cert.sk.key
############################
# TODO:
############################
# distribucia certifikativ bez textu ... vymazat texty pred begin...
# /etc/default/elasticsearch
############################
# ROLE:
############################

---
- block:
  ## Server and default hardening
  - include_role:
      name: common/linux-server
   
  ## Upgrade 
  - include_role:
      name: common/upgrade
      
  ## NETWORK: Hosts, extra localhost, sibling IPs based on group
  - include_role:
      name: common/linux-networking
    vars:
       - linux_networking_hostname_localhost: false
       - linux_networking_group: "{{ elastic.cluster_group }}"
   
  ## FW
  - include_role:
      name: common/firewall-ng

  ## SYSCTL    
  - name: special sysctl hardening
    sysctl:
       name: "{{ item.key }}"
       value: "{{ item.value }}"
       sysctl_set: yes
       reload: yes
       state: present
       ignoreerrors: yes #ignore errors about unknown keys
    with_dict:
      - vm.swappiness: 0
      - vm.max_map_count: 262144
      - net.ipv4.tcp_retries2: 5
    notify: sysctl flush routes

  ## USERS and groups  
  - name: users
    include_role:
       name: common/admins  
    vars:
       - users: "{{ admins }}" 
  
  - name: create user and add it to elasticsearch group
    user:
      name: "{{ item }}"
      state: present
      append: true
      groups: elasticsearch
      createhome: yes
      comment: "SK-CERT administrator"
    with_items : "{{ users }}"  
    
  ###    CERTIFICATE
  - name: Check if KEY certs exists
    file:
      path: "/etc/elasticsearch/certs/{{ elastic.node_name }}.key"
      state: file
      owner: root
      group: elasticsearch
      mode: 0640
  
  - name: Check if CRT certs exists
    file:
      path: "/etc/elasticsearch/certs/{{ elastic.node_name }}.crt"
      state: file
      owner: root
      group: elasticsearch
      mode: 0640
  
  - name: Check if CA certs exists
    file:
      path: "/etc/elasticsearch/certs/ca.crt"
      state: file
      owner: root
      group: elasticsearch
      mode: 0640
  
  ###    DISK
  - name: Create parent data directory
    file:
      path: "{{ elastic.data_path | dirname}}"
      state: directory
      owner: root
      group: root
      mode: 0755
                  
  - name: Create data directory
    file:
      path: "{{ elastic.data_path }}"
      state: directory
      owner: root
      group: elasticsearch
      mode: 0775
  
  # toto uz netreba
  #- name: Create tmp directory
  #  file:
  #    path: "/var/lib/elasticsearch/tmp"
  #    state: directory
  #    owner: elasticsearch
  #  notify: restart elasticsearch
  #  tags: never
    
  ### LIMITS
  - name: create limits.d directory if it does not exist
    file:
      path: '/etc/security/limits.d'
      owner: 'root'
      group: 'root'
      mode: '0755'
      state: 'directory'

  - name: create additional limits config file
    pam_limits:
      dest: '/etc/security/limits.d/elasticsearch.conf'
      domain: '*'
      limit_type: hard
      limit_item: core
      value: '0'
      comment: Prevent core dumps for all users. These are usually not needed and may contain sensitive information

  - name: create additional limits config file
    pam_limits:
      dest: '/etc/security/limits.d/elasticsearch.conf'
      domain: '*'
      limit_type: hard
      limit_item: nofile
      value: '65536'
      comment: Elastic needs more open files.

  - name: create additional limits config file
    pam_limits:
      dest: '/etc/security/limits.d/elasticsearch.conf'
      domain: '*'
      limit_type: hard
      limit_item: memlock
      value: 'unlimited'
      comment: Elastic needs memory

  - name: set *.conf perms to 0400 and root ownership
    file:
      path: /etc/security/limits.d/elasticsearch.conf
      owner: 'root'
      group: 'root'
      mode: '0440'            

  - name: load limits on session login
    lineinfile:
      path: "/etc/pam.d/common-session"
      line: "session required pam_limits.so"
    notify: restart elasticsearch

  # change mem limits MAX_LOCKED_MEMORY=unlimited and LimitMEMLOCK=infinity
  - name: prepare systemd override directory
    file:
      path: "/etc/systemd/system/elasticsearch.service.d"
      state: directory

  - name: configure memlock
    copy:
      src: "override.conf"
      dest: "/etc/systemd/system/elasticsearch.service.d/override.conf"
    notify:
      - reload systemctl
      - restart elasticsearch
  when:
    elastic.force is defined and elastic.force
  
### KEYSTORE
- name: create the elasticsearch keystore
  block:
  # only for testing
  - name: delete old keystore
    file:
      path: "{{ elastic.conf }}/elasticsearch.keystore"
      state: absent
    tags: always
    
  - name: delete old data
    file:
      path: "/data/elasticsearch/nodes"
      state: absent
    tags: always
    
  - name: create the keystore if it doesn't exist yet
    become: yes
    command: >
     {{elastic.home}}/bin/elasticsearch-keystore create
    args:
      creates: "{{ elastic.conf }}/elasticsearch.keystore"

  - name: Create Bootstrap password for elastic user
    become: yes
    shell: echo {{ elastic.password | quote }} | {{ elastic.home }}/bin/elasticsearch-keystore add -f -x 'bootstrap.password'
    #no_log: true
  when:
    elastic.force is defined and elastic.force

### ELASTIC  
- name: Stop elasticsearch
  service:
    name: elasticsearch
    state: stopped

- name: Install elasticsearch
  package:
    name: elasticsearch
    state: present
#  tags: never

- name: Configure elasticsearch
  template:
    backup: yes
    group: elasticsearch
    mode: 0640
    force: yes
    src: "elasticsearch_79.yml"
    dest: "/etc/elasticsearch/elasticsearch.yml"
  notify: restart elasticsearch

- name: Configure jvm
  template:
    backup: yes
    group: elasticsearch
    mode: 0640
    force: yes
    src: "jvm.options"
    dest: "/etc/elasticsearch/jvm.options"
  notify: restart elasticsearch
#  tags: never

- name: Configure logging
  when: log4j2 is defined
  template:
    src: log4j2.properties.j2
    dest: "/etc/elasticsearch/log4j2.properties"
  notify: restart elasticsearch
#  tags: never

- name: Enable services
  service:
    name: elasticsearch
    enabled: true
    state: started
#  tags: never


### STATUS
- name: "Show password"
#  tags: status or force
  debug: msg="Password for elastic user is {{elastic.password}} USAGE -u elastic:{{elastic.password}} in /tmp/passwordfile, REMOVE it after use."

   
### PASSWORD
- name: Wait for service to be ready
  wait_for:
    port: "{{ elastic.port }}"
    host: "{{ elastic.node_name }}"
    connect_timeout: 3
    delay: 3
    timeout: 60

- name: Show status
  uri:
    url: 'https://{{ elastic.node_name }}:{{ elastic.port }}/_cluster/health?pretty'
    user: elastic
    password: "{{ elastic.password }}"
    method: GET
    force_basic_auth: true
    validate_certs: false
    use_proxy: false
#    status_code: 201

- name: Update API User Password
  uri:
    url: "https://{{ elastic.node_name }}:{{ elastic.port }}/_security/user/elastic/_password"
    method: POST
    body_format: json
    body: "{ \"password\" : \"{{ elastic.password }}\" }"
    status_code: 200
    user: elastic
    password: "{{ elastic.password }}"
    force_basic_auth: true
    validate_certs: false
    use_proxy: false
  
- name: "Reboote message"
#  tags: status or force or install
  debug: msg="Please reboot this computers {{ groups[elastic.cluster_group] }}"

  
  

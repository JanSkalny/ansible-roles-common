cluster:
  name: "{{ elastic_cluster_name }}"
{% if 'master' in elastic_node_roles and elastic_version.split('.') | first | int >= 7 %}
{% if elastic_master_nodes | length > 1 %}
  initial_master_nodes: {{ elastic_master_nodes | to_json }}
{% endif %}
{% if elastic_custom_cluster_settings | default(False) %}
  {{ elastic_custom_cluster_settings | to_nice_yaml(indent=2) }}
{% endif %}

{% endif %}

node:
  name: "{{ elastic_node_name }}"
{% if elastic_version.split('.') | first | int <= 6 %}
  master: {{ elastic_node_master | default(True) }}
  data: {{ elastic_node_data | default(True) }}
  ingest: {{ elastic_node_ingest | default(True) }}
{% else %}
  roles: {{ elastic_node_roles | to_json }}
{% endif %}

{% if elastic_master_nodes | length > 1 %}
{% if elastic_version.split('.') | first | int <= 6 %}
discovery.zen:
  ping.unicast.hosts: {{ elastic_master_nodes | to_json }}
  minimum_master_nodes: {{ elastic_minimum_master_nodes | default(((elastic_master_nodes | length) / 2) | int + 1) }}
{% endif %}
{% if elastic_version.split('.') | first | int >= 7 %}
discovery.seed_hosts: {{ elastic_master_nodes | to_json }}
{% endif %}
{% else %}
discovery.type: single-node
{% endif %}

path:
  logs: "{{ elastic_log_path }}"
  data: "{{ elastic_data_path }}"

bootstrap.memory_lock: true

network.host: "{{ elastic_bind }}"
http.port: "{{ elastic_port }}"

{% if elastic_secure %}
xpack.security.enabled: true
xpack.security.autoconfiguration.enabled: false
xpack.security.enrollment.enabled: true
xpack.security.http.ssl:
  enabled: true
  certificate: tls/fullchain.pem
  key: tls/server.key
  certificate_authorities: tls/ca.crt
xpack.security.transport.ssl:
  enabled: true
  verification_mode: certificate
  certificate: tls/fullchain.pem
  key: tls/server.key
  certificate_authorities: tls/ca.crt
{% if elastic_ldap %}
xpack.security.authc.realms.ldap.ldap1:
  order: 0
  url: "{{ elastic_ldap_url }}"
  ssl:
    certificate_authorities: tls/ca.crt
  bind_dn: "{{ elastic_ldap_bind_dn }}"
  bind_password: "{{ elastic_ldap_bind_password }}"
  user_search:
    base_dn: "{{ elastic_ldap_users_dn }}"
    filter: "(uid={0})"
  group_search:
    base_dn: "{{ elastic_ldap_groups_dn }}"
  files:
    role_mapping: "role_mapping.yml"
  unmapped_groups_as_roles: false
{% endif %}
{% endif %}

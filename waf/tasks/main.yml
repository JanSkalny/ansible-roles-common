
- name: install waf dependencies debian
  package: 
    name: 
    - libvarnishapi-dev 
    - build-essential
    - varnish 
    - pkgconf
    state: present
  when: ansible_os_family == 'Debian'
  tags: install

- name: install waf dependencies rhel
  include_tasks: centos.yml
  when: ansible_os_family == 'RedHat' or ansible_os_family == 'Sangoma'
 
- name: install waf dependencies common
  package: 
    name: 
    - supervisor
    - autoconf 
    - libtool
    - haproxy
    - python-docutils
    - git
    state: present
  tags: install

- name: create haproxy ssl dir
  file:
    path: "/etc/haproxy/ssl"
    state: directory
  tags: install
- name: create varnish dir
  file:
    path: "/opt/varnish"
    state: directory
  tags: install

- name: checkout vsf
  git:
    repo: "https://github.com/comotion/VSF.git"
    force: yes
    update: yes
    version: "master"
    dest: "/opt/varnish"
  register: git_clone_vsf
  tags:
  - install
  - update

- name: build varnish
  make:
    chdir: "/opt/varnish"
  when: git_clone_vsf.changed
  tags:
  - install
  - update

- name: install varnish
  make:
    chdir: "/opt/varnish"
    target: "install"
  when: git_clone_vsf.changed
  notify: restart varnish
  tags:
  - install
  - update

- name: prepare systemd override directory
  file:
    path: "/etc/systemd/system/varnish.service.d"
    state: directory
  tags: configure

- name: configure varnish systemd override
  copy:
    src: "varnish-override.conf"
    dest: "/etc/systemd/system/varnish.service.d/override.conf"
  notify: 
  - reload systemctl
  - restart varnish
  tags: configure

- name: configure varnish
  template:
    src: "{{ item }}"
    dest: "/etc/varnish/{{ item }}"
  notify: restart varnish
  with_items:
  - default.vcl
  - letsencrypt.vcl
  tags: configure
  
#- name: list all local varnish rules
#  connection: local
#  become: no
#  changed_when: false 
#  check_mode: no
#  command: "ls \"{{ role_path }}/files/rules/\""
#  register: varnish_rules
#  tags: configure

- name: copy varnish rules
  copy:
    src: "rules/{{ item }}"
    dest: "/etc/varnish/security/rules/{{ item }}"
  with_items: "{{ waf_vsf_rules }}"
  notify: restart varnish
  tags: configure

- name: configure vsf
  vars:
    waf_include_rules: "{{ waf_vsf_rules }}"
  template:
    src: "{{ item }}"
    dest: "/etc/varnish/security/{{ item }}"
  with_items:
  - "config.vcl"
  - "handlers.vcl"
  tags: configure
  notify: restart varnish

- name: enable varnishlog service
  service:
    name: "varnishlog"
    enabled: yes

- name: run all handlers at this point. we will need it for letsencrypt
  meta: flush_handlers

- name: generate letsencrypt certificates for each https enabled domain
  include_role:
    name: common/letsencrypt/want 
  vars:
    domain: "{{ item }}"
    aliases: "{{ waf_domains | selectattr('domain', '==', item) | selectattr('aliases', 'defined') | map(attribute='aliases') | list | join(' ') }}"
  with_items: "{{ waf_domains | selectattr('https', 'defined') | selectattr('https') | map(attribute='domain') | list }}"
  when: waf_letsencrypt
  tags: 
  - configure
  - letsencrypt

- name: configure haproxy
  template:
    src: haproxy.cfg
    dest: /etc/haproxy/haproxy.cfg
  tags: configure
  notify: 
  - concat ssl
  - restart haproxy

- name: deploy haproxy letsencrypt hook
  copy:
    src: concat_ssl.sh
    dest: /etc/haproxy/concat_ssl.sh
    mode: 0755
  when: waf_letsencrypt
  notify: concat ssl

- name: install haproxy letsencrypt hook
  file:
    src: /etc/haproxy/concat_ssl.sh
    dest: /etc/letsencrypt/renewal-hooks/post/haproxy
    state: link
  when: waf_letsencrypt

- name: deploy varnish log parser
  copy: 
    src: varnisher.py
    dest: /root/varnisher.py
    owner: root
    mode: 500
  notify: restart varnish

- name: supervisor config 
  copy:
    src: supervisor.conf
    dest: "{{ supervisor_conf_d }}/varnisher{{ supervisor_conf_suffix }}"
  notify: restart supervisor
  tags: configure

- name: enable supervisor service
  service:
    name: "{{ supervisor_service }}"
    enabled: yes

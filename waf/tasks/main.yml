
- name: install dependencies
  package:
    name:
    - apt-transport-https
    - curl
    - gnupg
    - git
  tags: install

- name: install varnish from package
  when: not waf_install_from_source
  include_tasks: varnish_from_package.yml

# TODO: install varnish from source (git) with specific version
- name: install varnish from source
  when: waf_install_from_source
  include_tasks: varnish_from_source.yml

- name: install packages
  package:
    name:
    state: present
  loop:
    - build-essential
    - pkgconf
    - supervisor
    - autoconf
    - libtool
    - haproxy
    - python3-docutils
  tags: install

- name: create haproxy ssl dir
  file:
    path: "/etc/haproxy/ssl"
    state: directory
  tags: install
- name: create vsf dir
  file:
    path: "/opt/vsf"
    state: directory
  tags: install

- name: checkout vsf
  git:
    repo: "https://github.com/comotion/VSF.git"
    force: yes
    update: yes
    version: "{{ waf_vsf_version }}"
    dest: "/opt/vsf"
  register: git_clone_vsf
  tags:
  - install
  - update

- when: git_clone_vsf.changed
  block:
    - name: build vsf
      make:
        chdir: "/opt/vsf"
      tags:
      - install
      - update

    - name: install vsf
      make:
        chdir: "/opt/vsf"
        target: "install"
      notify: restart varnish
      tags:
      - install
      - update

- name: prepare systemd override directory
  file:
    path: "/etc/systemd/system/varnish.service.d"
    state: directory
  tags: configure

- name: configure varnish systemd override
  template:
    src: "varnish-override.conf"
    dest: "/etc/systemd/system/varnish.service.d/override.conf"
  notify:
  - reload systemctl
  - restart varnish
  tags: configure

- name: configure varnish
  template:
    src: "{{ item }}"
    dest: "/etc/varnish/{{ item }}"
  notify: restart varnish
  with_items:
  - default.vcl
  - letsencrypt.vcl
  tags: configure

#- name: list all local varnish rules
#  connection: local
#  become: no
#  changed_when: false
#  check_mode: no
#  command: "ls \"{{ role_path }}/files/rules/\""
#  register: varnish_rules
#  tags: configure

- name: copy varnish rules
  copy:
    src: "rules/{{ item }}"
    dest: "/etc/varnish/security/rules/{{ item }}"
  with_items: "{{ waf_vsf_rules }}"
  notify: restart varnish
  tags: configure

- name: configure vsf
  vars:
    waf_include_rules: "{{ waf_vsf_rules }}"
  template:
    src: "{{ item }}"
    dest: "/etc/varnish/security/{{ item }}"
  with_items:
  - "config.vcl"
  - "handlers.vcl"
  tags: configure
  notify: restart varnish

##- name: enable varnishlog service
##  service:
##    name: "varnishlog"
##    enabled: yes

- name: run all handlers at this point. we will need it for letsencrypt
  meta: flush_handlers

- name: stop varnish to release port tcp/80 for certbot
  service:
    name: varnish
    state: stopped

- name: generate letsencrypt certificates for each https enabled domain
  include_role:
    name: common/letsencrypt/want
  vars:
    domain: "{{ item }}"
    aliases: "{{ waf_domains | selectattr('domain', '==', item) | selectattr('aliases', 'defined') | map(attribute='aliases') | list | join(' ') }}"
  with_items: "{{ waf_domains | selectattr('https', 'defined') | selectattr('https') | map(attribute='domain') | list }}"
  when: waf_letsencrypt == true
  tags:
  - configure
  - letsencrypt

- name: start varnish
  service:
    name: varnish
    state: started

- name: configure haproxy
  template:
    src: haproxy.cfg
    dest: /etc/haproxy/haproxy.cfg
  tags: configure
  notify:
  - concat ssl
  - restart haproxy

- name: deploy haproxy letsencrypt hook
  copy:
    src: concat_ssl.sh
    dest: /etc/haproxy/concat_ssl.sh
    mode: 0755
  when: waf_letsencrypt == true
  notify: concat ssl

- name: install haproxy letsencrypt hook
  file:
    src: /etc/haproxy/concat_ssl.sh
    dest: /etc/letsencrypt/renewal-hooks/post/haproxy
    state: link
  when: waf_letsencrypt == true

- name: deploy varnish log parser
  template:
    src: varnisher_speedy.py
    dest: /root/varnisher.py
    owner: root
    mode: 500
  notify: restart varnish

- name: supervisor config
  copy:
    src: supervisor.conf
    dest: "/etc/supervisor/conf.d/varnisher.conf"
  notify: restart supervisor
  tags: configure

- name: enable supervisor service
  service:
    name: "supervisor"
    enabled: yes
